# SPDX-FileCopyrightText: 2023 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import datetime
from unittest.mock import AsyncMock
from uuid import uuid4

import pytest

from autogenerated_graphql_client import GraphQLClient


@pytest.mark.asyncio
async def test_mo_get_engagement_method():
    """
    Tests if the MO client execute coroutine for get_engagement was
    awaited, and if it was awaited with the arguments we expect.
    """
    mocked_mo_client = GraphQLClient()
    mocked_mo_client.get_engagement = AsyncMock()
    engagement_uuid = uuid4()
    email_user_key = ["foo", "bar"]

    await mocked_mo_client.get_engagement(engagement_uuid, email_user_key)
    # ASSERT
    mocked_mo_client.get_engagement.assert_awaited_once()
    mocked_mo_client.get_engagement.assert_awaited_once_with(
        engagement_uuid, email_user_key
    )


@pytest.mark.asyncio
async def test_mo_update_extension_field():
    """
    Tests if the MO client execute coroutine for get_engagement was
    awaited, and if it was awaited with the arguments we expect.
    """
    mocked_mo_client = GraphQLClient()
    mocked_mo_client.update_extension_field = AsyncMock()
    engagement_uuid = uuid4()
    from_date = datetime.date.today()
    update_to_extension = "foo"

    await mocked_mo_client.update_extension_field(
        engagement_uuid, from_date, update_to_extension
    )
    # ASSERT
    mocked_mo_client.update_extension_field.assert_awaited_once()
    mocked_mo_client.update_extension_field.assert_awaited_once_with(
        engagement_uuid, from_date, update_to_extension
    )
