# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
from unittest.mock import AsyncMock
from uuid import uuid4

import pytest
from pydantic import parse_obj_as

from job_function_configurator.models.get_job_functions import GetJobFunctions
from job_function_configurator.queries_made_to_mo import get_engagement_object

engagements_response_from_graphql_query = {
    "engagements": {
        "objects": [
            {
                "current": {
                    "extension_2": None,
                    "extension_3": None,
                    "is_primary": False,
                    "job_function": {
                        "name": "Lønkonsulent",
                        "user_key": "Lønkonsulent",
                        "uuid": "4ddd1c35-49b2-446b-a10f-f188ba18438a",
                    },
                    "primary": {
                        "name": "Primær",
                        "user_key": "primary",
                        "uuid": "0644cd06-b84b-42e0-95fe-ce131c21fbe6",
                    },
                    "employee": [
                        {
                            "uuid": "7155fa21-3103-40d1-922a-065a8adb6b0e",
                            "addresses": [
                                {
                                    "name": "lulu@scviborg.dk",
                                    "user_key": "lulu@scviborg.dk",
                                    "value": "lulu@scviborg.dk",
                                    "address_type": {
                                        "user_key": "EmailEmployee",
                                        "scope": "EMAIL",
                                        "name": "Email",
                                    },
                                },
                                {
                                    "name": "24533571",
                                    "user_key": "24533571",
                                    "value": "24533571",
                                    "address_type": {
                                        "user_key": "PhoneEmployee",
                                        "scope": "PHONE",
                                        "name": "Telefon",
                                    },
                                },
                                {
                                    "name": "Svanesøen 278, 6000 Kolding",
                                    "user_key": "4aaf04e0-bf1e-4ff8-9429-473916eb6ab5",
                                    "value": "4aaf04e0-bf1e-4ff8-9429-473916eb6ab5",
                                    "address_type": {
                                        "user_key": "AdressePostEmployee",
                                        "scope": "DAR",
                                        "name": "Postadresse",
                                    },
                                },
                            ],
                        }
                    ],
                },
                "uuid": "c38b9852-d249-4bfd-9d5d-4e0918560fa3",
            }
        ]
    }
}


@pytest.mark.asyncio
async def test_get_engagement_fields():
    """
    Tests if the GraphQL execute coroutine was awaited, and whether the response
    data is parsed as we expect in accordance to the model generated by QuickType.
    """
    # ARRANGE
    engagement_uuid = uuid4()
    mocked_graphql_client = AsyncMock()

    expected_engagement_response = parse_obj_as(
        GetJobFunctions, {"data": engagements_response_from_graphql_query}
    )

    mock_execute = AsyncMock(return_value=engagements_response_from_graphql_query)
    mocked_graphql_client.execute = mock_execute

    # ACT
    actual_engagement_response = await get_engagement_object(
        gql_client=mocked_graphql_client, engagement_uuid=engagement_uuid
    )

    # ASSERT
    assert actual_engagement_response == expected_engagement_response
    mock_execute.assert_awaited_once()
